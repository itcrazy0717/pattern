package com.learning.pattern.factory;
/**
 * #1.简单工厂模式
 * 是指由一个工厂对象决定创建出哪一种产品类的实例
 * 涉及角色：工厂对象、抽象产品、具体产品
 * 核心点在于工厂对象
 * 属于创建型设计模式
 * 适用场景：
 * 工厂对象负责创建较少的对象，客户端只需传入特定的工厂类参数，就可以生成不同的产品对象，不需要关心具体创建逻辑
 * 缺点：
 * 工厂对象的职责过重，增加新的产品需要修改工厂对象的判断逻辑，违背开闭原则，不利于扩展过于复杂的产品结构
 * #2.工厂方法模式
 * 指定义一个创建对象的接口，由实现接口的类来决定实例化哪个产品，将产品的实例化推迟到子类中进行
 * 涉及角色：抽象工厂、具体工厂、抽象产品、具体产品
 * 属于创建型设计模式
 * 一次只能生产单一的产品
 * 适用场景：
 * 创建对象需要大量重复的代码，产品的实现通过子类来完成
 * 符合开闭原则
 * 缺点：
 * 类的个数容易过多，增加了代码结构的复杂度，增加了系统的抽象性
 * #3.抽象工厂模式
 * 提供一个创建一系列产品或相互依赖的对象的接口，来产生一系列的产品
 * 属于创建型设计模式
 * 涉及角色：抽象工厂、具体工厂、抽象产品、具体产品
 * 适用场景：
 * 强调一系列相关产品对象（同一产品族）的创建
 * 增加产品族容易
 * 缺点：
 * 扩展新的产品困难，需要修改抽象工厂的接口
 */